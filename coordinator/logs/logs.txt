Cloning into 'ws/algebra_2.2.1/repo'...
Note: switching to 'de462a02607d67cda2c5a7f5faf7883731b2504c'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

[info] welcome to sbt 1.4.7 (Private Build Java 1.8.0_282)
[info] loading global plugins from /home/krzysiek/.sbt/1.0/plugins
[info] loading settings for project repo-build from plugins.sbt,zzz_ooo.sbt ...
[info] loading project definition from /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/project
[warn] There may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.
[info] compiling 2 Scala sources to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/project/target/scala-2.12/sbt-1.0/classes ...
[info] done compiling
[info] loading settings for project aggregate from build.sbt,version.sbt ...
[info] resolving key references (10140 settings) ...
[info] set current project to aggregate (in build file:/home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/)
[warn] there are 14 keys that are not used by any other settings/tasks:
[warn]  
[warn] * aggregate / Scalaunidoc / unidoc / fork
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:139
[warn] * aggregate / mdoc / fork
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:138
[warn] * aggregate / micrositeAuthor
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:124
[warn] * aggregate / micrositeBaseUrl
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:127
[warn] * aggregate / micrositeDescription
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:123
[warn] * aggregate / micrositeDocumentationUrl
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:128
[warn] * aggregate / micrositeExtraMdFiles
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:130
[warn] * aggregate / micrositeGithubOwner
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:129
[warn] * aggregate / micrositeGithubRepo
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:131
[warn] * aggregate / micrositeHighlightTheme
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:125
[warn] * aggregate / micrositeHomepage
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:126
[warn] * aggregate / micrositeName
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:122
[warn] * docs / Scalaunidoc / unidoc / fork
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:139
[warn] * docs / mdoc / fork
[warn]   +- /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/build.sbt:138
[warn]  
[warn] note: a setting might still be used by a command; to exclude a key from this `lintUnused` check
[warn] either append it to `Global / excludeLintKeys` or call .withRank(KeyRanks.Invisible) on the key
[success] Total time: 0 s, completed Feb 25, 2021 8:05:06 PM
[info] Forcing Scala version to 3.0.0-RC1-bin-SNAPSHOT on all projects.
[info] Reapplying settings...
[info] set current project to aggregate (in build file:/home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/)
[info] Defining Global / version, ThisBuild / version, benchmark / Jmh / version
[info] The new values will be used by Compile / packageBin / packageOptions, Compile / packageSrc / packageOptions and 136 others.
[info] 	Run `last` for details.
[info] Reapplying settings...
[info] set current project to aggregate (in build file:/home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/)
[info] Defining Global / credentials, benchmark / credentials and 7 others.
[info] The new values will be used by Global / pgpSelectPassphrase, Global / pgpSigningKey and 44 others.
[info] 	Run `last` for details.
[info] Reapplying settings...
[info] set current project to aggregate (in build file:/home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/)
Starting build...
Starting build for ProjectRef(file:/home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/,lawsJVM)...
[warn] There may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.
[info] compiling 50 Scala sources to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/.jvm/target/scala-3.0.0-RC1/classes ...
[warn] bad option '-Xlint' was ignored
[warn] bad option '-Ywarn-dead-code' was ignored
[warn] bad option '-Ywarn-numeric-widen' was ignored
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/instances/map.scala:55:7 
[warn] 55 |    as.foreach { m =>
[warn]    |    ^^^^^^^^^^
[warn]    |method foreach in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.foreach(...) instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/instances/map.scala:97:11 
[warn] 97 |    if (as.isEmpty) {
[warn]    |        ^^^^^^^^^^
[warn]    |method isEmpty in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.isEmpty instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/instances/map.scala:102:9 
[warn] 102 |      as.foreach { m =>
[warn]     |      ^^^^^^^^^^
[warn]     |method foreach in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.foreach(...) instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Additive.scala:34:7 
[warn] 34 |    as.toIterator.reduceOption(plus)
[warn]    |    ^^^^^^^^^^^^^
[warn]    |method toIterator in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Additive.scala:68:7 
[warn] 68 |    as.foldLeft(zero)(plus)
[warn]    |    ^^^^^^^^^^^
[warn]    |method foldLeft in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.foldLeft instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Additive.scala:71:11 
[warn] 71 |    if (as.isEmpty) None else Some(sum(as))
[warn]    |        ^^^^^^^^^^
[warn]    |method isEmpty in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.isEmpty instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Multiplicative.scala:34:7 
[warn] 34 |    as.toIterator.reduceOption(times)
[warn]    |    ^^^^^^^^^^^^^
[warn]    |method toIterator in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Multiplicative.scala:65:7 
[warn] 65 |    as.foldLeft(one)(times)
[warn]    |    ^^^^^^^^^^^
[warn]    |method foldLeft in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.foldLeft instead
[warn] -- Deprecation Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Multiplicative.scala:68:11 
[warn] 68 |    if (as.isEmpty) None else Some(product(as))
[warn]    |        ^^^^^^^^^^
[warn]    |method isEmpty in class IterableOnceExtensionMethods is deprecated since 2.13.0: Use .iterator.isEmpty instead
[warn] -- Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/src/main/scala/algebra/ring/Multiplicative.scala:107:19 
[warn] 107 |    ev.isInstanceOf[MultiplicativeCommutativeSemigroup[A]]
[warn]     |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[warn]     |the type test for algebra.ring.MultiplicativeCommutativeSemigroup[A] cannot be checked at runtime
[warn] 13 warnings found
[warn] 13 warnings found
[info] done compiling
[info] compiling 13 Scala sources to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/jvm/target/scala-3.0.0-RC1/classes ...
[warn] bad option '-Xlint' was ignored
[warn] bad option '-Ywarn-dead-code' was ignored
[warn] bad option '-Ywarn-numeric-widen' was ignored
[warn] three warnings found
[warn] three warnings found
[info] done compiling
[info] compiling 5 Scala sources to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/jvm/target/scala-3.0.0-RC1/test-classes ...
[warn] bad option '-Xlint' was ignored
[warn] bad option '-Ywarn-dead-code' was ignored
[warn] bad option '-Ywarn-numeric-widen' was ignored
[warn] -- Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/shared/src/test/scala/algebra/laws/LawTests.scala:201:28 
[warn] 201 |      Vector.tabulate(nMax)(N).sorted(order.toOrdering)
[warn]     |                            ^
[warn]     |The method `apply` is inserted. The auto insertion will be deprecated, please write `N.apply` explicitly.
[warn] -- Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/shared/src/test/scala/algebra/laws/LawTests.scala:205:32 
[warn] 205 |        Iterator.tabulate(nMax)(N)
[warn]     |                                ^
[warn]     |The method `apply` is inserted. The auto insertion will be deprecated, please write `N.apply` explicitly.
[warn] -- Warning: /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/shared/src/test/scala/algebra/laws/LawTests.scala:206:50 
[warn] 206 |          .flatMap { x => Iterator.tabulate(nMax)(N).map((x, _)) }
[warn]     |                                                  ^
[warn]     |The method `apply` is inserted. The auto insertion will be deprecated, please write `N.apply` explicitly.
[warn] 6 warnings found
[warn] 6 warnings found
[info] done compiling
[32malgebra.laws.LawTests:[0m
[32m  + [0m[32mBoolean: order.antisymmetry[0m [90m0.062s[0m
[32m  + [0m[32mBoolean: order.antisymmetry-eq[0m [90m0.02s[0m
[32m  + [0m[32mBoolean: order.compare[0m [90m0.036s[0m
[32m  + [0m[32mBoolean: order.gt[0m [90m0.009s[0m
[32m  + [0m[32mBoolean: order.gteqv[0m [90m0.007s[0m
[32m  + [0m[32mBoolean: order.lt[0m [90m0.008s[0m
[32m  + [0m[32mBoolean: order.max[0m [90m0.01s[0m
[32m  + [0m[32mBoolean: order.min[0m [90m0.01s[0m
[32m  + [0m[32mBoolean: order.partialCompare[0m [90m0.013s[0m
[32m  + [0m[32mBoolean: order.pmax[0m [90m0.01s[0m
[32m  + [0m[32mBoolean: order.pmin[0m [90m0.009s[0m
[32m  + [0m[32mBoolean: order.reflexitivity[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: order.reflexitivity-eq[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: order.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: order.symmetry-eq[0m [90m0.006s[0m
[32m  + [0m[32mBoolean: order.totality[0m [90m0.007s[0m
[32m  + [0m[32mBoolean: order.transitivity[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: order.transitivity-eq[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.associativity[0m [90m0.007s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.02s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.003s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.011s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.commutative[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.014s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.009s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.absorption[0m [90m0.003s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.distributive[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: bool.lattice:boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: bool.(0 → x) = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.(x → z) → ((y → z) → ((x | y) → z)) = 1[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.(x→(y→z)) → ((x→y)→(x→z)) = 1[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.consistent[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: bool.distributive[0m [90m0.003s[0m
[32m  + [0m[32mBoolean: bool.excluded middle[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.if (1 → x)=1 then x=1[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: bool.if x → y and y → x then x=y[0m [90m0.007s[0m
[32m  + [0m[32mBoolean: bool.x → (y → x) = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.x → x = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.x → x∨y[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.x → y → (x∧y) = 1[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.x\\y ∧ y = 0[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.x\\y ∨ y = x ∨ y[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.x∧y → x = 1[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: bool.x∧y → y = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.y → x∨y[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: bool.¬x = (x → 0)[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.009s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.008s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.002s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.01s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.006s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.absorption[0m [90m0.002s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.distributive[0m [90m0.003s[0m
[32m  + [0m[32mSimpleHeyting: logic.lattice:boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: logic.distributive[0m [90m0.003s[0m
[32m  + [0m[32mSimpleHeyting: logic.¬(x∧y) = ¬¬(¬x∨¬y)[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: logic.¬(x∨y) = ¬x∧¬y[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.005s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.004s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.absorption[0m [90m0.002s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.distributive[0m [90m0.002s[0m
[32m  + [0m[32mSimpleHeyting: heyting.lattice:boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.(0 → x) = 1[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.(x → z) → ((y → z) → ((x | y) → z)) = 1[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.(x→(y→z)) → ((x→y)→(x→z)) = 1[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.consistent[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.distributive[0m [90m0.002s[0m
[32m  + [0m[32mSimpleHeyting: heyting.if (1 → x)=1 then x=1[0m [90m0.002s[0m
[32m  + [0m[32mSimpleHeyting: heyting.if x → y and y → x then x=y[0m [90m0.003s[0m
[32m  + [0m[32mSimpleHeyting: heyting.x → (y → x) = 1[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.x → x = 1[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.x → x∨y[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.x → y → (x∧y) = 1[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.x∧y → x = 1[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.x∧y → y = 1[0m [90m0.001s[0m
[32m  + [0m[32mSimpleHeyting: heyting.y → x∨y[0m [90m0.0s[0m
[32m  + [0m[32mSimpleHeyting: heyting.¬x = (x → 0)[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.008s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.006s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.009s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.005s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.absorption[0m [90m0.002s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.distributive[0m [90m0.002s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.lattice:boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.distributive[0m [90m0.002s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.involutive[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.¬(x∧y) = ¬¬(¬x∨¬y)[0m [90m0.001s[0m
[32m  + [0m[32mSimpleDeMorgan: deMorgan.¬(x∨y) = ¬x∧¬y[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.absorption[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.distributive[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.lattice:boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.distributive[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: deMorgan.involutive[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: deMorgan.¬(x∧y) = ¬¬(¬x∨¬y)[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: deMorgan.¬(x∨y) = ¬x∧¬y[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boundedLatticePartialOrder.join+lteqv[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boundedLatticePartialOrder.lteqv+one[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boundedLatticePartialOrder.lteqv+zero[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boundedLatticePartialOrder.meet+lteqv[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.007s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.022s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.005s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mBoolean: boolean ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean: boolean ring.distributive[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: boolean ring.fromBigInt[0m [90m0.05s[0m
[32m  + [0m[32mBoolean: boolean ring.fromInt[0m [90m0.002s[0m
[32m  + [0m[32mBoolean: boolean ring.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.002s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.016s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.006s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.consistent subtract[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.004s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.distributive[0m [90m0.002s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.fromBigInt[0m [90m0.035s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.fromInt[0m [90m0.002s[0m
[32m  + [0m[32mBoolean-ring-from-bool: boolean ring.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.004s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.004s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.absorption[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.distributive[0m [90m0.002s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.lattice:boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.(0 → x) = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.(x → z) → ((y → z) → ((x | y) → z)) = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.(x→(y→z)) → ((x→y)→(x→z)) = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.consistent[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.distributive[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.excluded middle[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.if (1 → x)=1 then x=1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.if x → y and y → x then x=y[0m [90m0.004s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x → (y → x) = 1[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x → x = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x → x∨y[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x → y → (x∧y) = 1[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x\\y ∧ y = 0[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x\\y ∨ y = x ∨ y[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x∧y → x = 1[0m [90m0.001s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.x∧y → y = 1[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.y → x∨y[0m [90m0.0s[0m
[32m  + [0m[32mBoolean- bool-from-ring: bool.¬x = (x → 0)[0m [90m0.001s[0m
[32m  + [0m[32mString: order.antisymmetry[0m [90m0.005s[0m
[32m  + [0m[32mString: order.antisymmetry-eq[0m [90m0.012s[0m
[32m  + [0m[32mString: order.compare[0m [90m0.005s[0m
[32m  + [0m[32mString: order.gt[0m [90m0.003s[0m
[32m  + [0m[32mString: order.gteqv[0m [90m0.002s[0m
[32m  + [0m[32mString: order.lt[0m [90m0.002s[0m
[32m  + [0m[32mString: order.max[0m [90m0.002s[0m
[32m  + [0m[32mString: order.min[0m [90m0.002s[0m
[32m  + [0m[32mString: order.partialCompare[0m [90m0.004s[0m
[32m  + [0m[32mString: order.pmax[0m [90m0.002s[0m
[32m  + [0m[32mString: order.pmin[0m [90m0.002s[0m
[32m  + [0m[32mString: order.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mString: order.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mString: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mString: order.symmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mString: order.totality[0m [90m0.002s[0m
[32m  + [0m[32mString: order.transitivity[0m [90m0.002s[0m
[32m  + [0m[32mString: order.transitivity-eq[0m [90m0.002s[0m
[32m  + [0m[32mString: monoid.associativity[0m [90m0.002s[0m
[32m  + [0m[32mString: monoid.combineAll[0m [90m0.039s[0m
[32m  + [0m[32mString: monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.combineAllOption[0m [90m0.014s[0m
[32m  + [0m[32mString: monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mString: monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[HasEq[Int]]: eq.antisymmetry-eq[0m [90m0.005s[0m
[32m  + [0m[32mOption[HasEq[Int]]: eq.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasEq[Int]]: eq.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[HasEq[Int]]: eq.symmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasEq[Int]]: eq.transitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.antisymmetry[0m [90m0.002s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.antisymmetry-eq[0m [90m0.003s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.gt[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.gteqv[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.lt[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.partialCompare[0m [90m0.003s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.pmax[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.pmin[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.symmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.transitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[Int]]: partialOrder.transitivity-eq[0m [90m0.002s[0m
[32m  + [0m[32mOption[Int]: order.antisymmetry[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.antisymmetry-eq[0m [90m0.002s[0m
[32m  + [0m[32mOption[Int]: order.compare[0m [90m0.002s[0m
[32m  + [0m[32mOption[Int]: order.gt[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.gteqv[0m [90m0.0s[0m
[32m  + [0m[32mOption[Int]: order.lt[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.max[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.min[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.partialCompare[0m [90m0.003s[0m
[32m  + [0m[32mOption[Int]: order.pmax[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.pmin[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[Int]: order.symmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.totality[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.transitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: order.transitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: monoid.combineAll[0m [90m0.005s[0m
[32m  + [0m[32mOption[Int]: monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mOption[Int]: monoid.combineAllOption[0m [90m0.005s[0m
[32m  + [0m[32mOption[Int]: monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mOption[Int]: monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mOption[Int]: monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mOption[Int]: monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[HasEq[String]]: eq.antisymmetry-eq[0m [90m0.006s[0m
[32m  + [0m[32mOption[HasEq[String]]: eq.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasEq[String]]: eq.serializable[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasEq[String]]: eq.symmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasEq[String]]: eq.transitivity-eq[0m [90m0.002s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.antisymmetry[0m [90m0.002s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.antisymmetry-eq[0m [90m0.004s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.gt[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.gteqv[0m [90m0.002s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.lt[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.partialCompare[0m [90m0.004s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.pmax[0m [90m0.023s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.pmin[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.symmetry-eq[0m [90m0.002s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.transitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[HasPartialOrder[String]]: partialOrder.transitivity-eq[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.antisymmetry[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.antisymmetry-eq[0m [90m0.004s[0m
[32m  + [0m[32mOption[String]: order.compare[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.gt[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.gteqv[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.lt[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.max[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.min[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.partialCompare[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.pmax[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.pmin[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.reflexitivity[0m [90m0.0s[0m
[32m  + [0m[32mOption[String]: order.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOption[String]: order.symmetry-eq[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: order.totality[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.transitivity[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: order.transitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.associativity[0m [90m0.002s[0m
[32m  + [0m[32mOption[String]: monoid.combineAll[0m [90m0.013s[0m
[32m  + [0m[32mOption[String]: monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.combineAllOption[0m [90m0.033s[0m
[32m  + [0m[32mOption[String]: monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mOption[String]: monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mList[HasEq[Int]]: eq.antisymmetry-eq[0m [90m0.013s[0m
[32m  + [0m[32mList[HasEq[Int]]: eq.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mList[HasEq[Int]]: eq.serializable[0m [90m0.001s[0m
[32m  + [0m[32mList[HasEq[Int]]: eq.symmetry-eq[0m [90m0.003s[0m
[32m  + [0m[32mList[HasEq[Int]]: eq.transitivity-eq[0m [90m0.004s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.antisymmetry[0m [90m0.004s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.antisymmetry-eq[0m [90m0.008s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.gt[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.gteqv[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.lt[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.partialCompare[0m [90m0.004s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.pmax[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.pmin[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.serializable[0m [90m0.0s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.symmetry-eq[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.transitivity[0m [90m0.003s[0m
[32m  + [0m[32mList[HasPartialOrder[Int]]: partialOrder.transitivity-eq[0m [90m0.004s[0m
[32m  + [0m[32mList[Int]: order.antisymmetry[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: order.antisymmetry-eq[0m [90m0.005s[0m
[32m  + [0m[32mList[Int]: order.compare[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.gt[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: order.gteqv[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.lt[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: order.max[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.min[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: order.partialCompare[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.pmax[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: order.pmin[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: order.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: order.serializable[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: order.symmetry-eq[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: order.totality[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.transitivity[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: order.transitivity-eq[0m [90m0.003s[0m
[32m  + [0m[32mList[Int]: monoid.associativity[0m [90m0.005s[0m
[32m  + [0m[32mList[Int]: monoid.combineAll[0m [90m0.075s[0m
[32m  + [0m[32mList[Int]: monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: monoid.combineAllOption[0m [90m0.055s[0m
[32m  + [0m[32mList[Int]: monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: monoid.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: monoid.combineN(a, 2) == a |+| a[0m [90m0.013s[0m
[32m  + [0m[32mList[Int]: monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: monoid.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mList[Int]: monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mList[Int]: monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mList[HasEq[String]]: eq.antisymmetry-eq[0m [90m0.07s[0m
[32m  + [0m[32mList[HasEq[String]]: eq.reflexitivity-eq[0m [90m0.017s[0m
[32m  + [0m[32mList[HasEq[String]]: eq.serializable[0m [90m0.001s[0m
[32m  + [0m[32mList[HasEq[String]]: eq.symmetry-eq[0m [90m0.021s[0m
[32m  + [0m[32mList[HasEq[String]]: eq.transitivity-eq[0m [90m0.036s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.antisymmetry[0m [90m0.022s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.antisymmetry-eq[0m [90m0.069s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.gt[0m [90m0.029s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.gteqv[0m [90m0.02s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.lt[0m [90m0.022s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.partialCompare[0m [90m0.026s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.pmax[0m [90m0.021s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.pmin[0m [90m0.026s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.reflexitivity[0m [90m0.011s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.reflexitivity-eq[0m [90m0.011s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.serializable[0m [90m0.0s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.symmetry-eq[0m [90m0.021s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.transitivity[0m [90m0.035s[0m
[32m  + [0m[32mList[HasPartialOrder[String]]: partialOrder.transitivity-eq[0m [90m0.037s[0m
[32m  + [0m[32mList[String]: order.antisymmetry[0m [90m0.023s[0m
[32m  + [0m[32mList[String]: order.antisymmetry-eq[0m [90m0.063s[0m
[32m  + [0m[32mList[String]: order.compare[0m [90m0.024s[0m
[32m  + [0m[32mList[String]: order.gt[0m [90m0.021s[0m
[32m  + [0m[32mList[String]: order.gteqv[0m [90m0.021s[0m
[32m  + [0m[32mList[String]: order.lt[0m [90m0.027s[0m
[32m  + [0m[32mList[String]: order.max[0m [90m0.021s[0m
[32m  + [0m[32mList[String]: order.min[0m [90m0.022s[0m
[32m  + [0m[32mList[String]: order.partialCompare[0m [90m0.024s[0m
[32m  + [0m[32mList[String]: order.pmax[0m [90m0.022s[0m
[32m  + [0m[32mList[String]: order.pmin[0m [90m0.021s[0m
[32m  + [0m[32mList[String]: order.reflexitivity[0m [90m0.011s[0m
[32m  + [0m[32mList[String]: order.reflexitivity-eq[0m [90m0.01s[0m
[32m  + [0m[32mList[String]: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mList[String]: order.symmetry-eq[0m [90m0.025s[0m
[32m  + [0m[32mList[String]: order.totality[0m [90m0.022s[0m
[32m  + [0m[32mList[String]: order.transitivity[0m [90m0.031s[0m
[32m  + [0m[32mList[String]: order.transitivity-eq[0m [90m0.037s[0m
[32m  + [0m[32mList[String]: monoid.associativity[0m [90m0.032s[0m
[32m  + [0m[32mList[String]: monoid.combineAll[0m [90m0.451s[0m
[32m  + [0m[32mList[String]: monoid.combineAll(Nil) == id[0m [90m0.009s[0m
[32m  + [0m[32mList[String]: monoid.combineAllOption[0m [90m0.403s[0m
[32m  + [0m[32mList[String]: monoid.combineN(a, 0) == id[0m [90m0.012s[0m
[32m  + [0m[32mList[String]: monoid.combineN(a, 1) == a[0m [90m0.011s[0m
[32m  + [0m[32mList[String]: monoid.combineN(a, 2) == a |+| a[0m [90m0.011s[0m
[32m  + [0m[32mList[String]: monoid.isEmpty[0m [90m0.011s[0m
[32m  + [0m[32mList[String]: monoid.leftIdentity[0m [90m0.012s[0m
[32m  + [0m[32mList[String]: monoid.rightIdentity[0m [90m0.016s[0m
[32m  + [0m[32mList[String]: monoid.serializable[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.associativity[0m [90m0.042s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAll[0m [90m0.189s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAllOption[0m [90m0.053s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.commutative[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.leftIdentity[0m [90m0.003s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.associativity[0m [90m0.016s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineAllOption[0m [90m0.059s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineN(a, 2) == a |+| a[0m [90m0.003s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.commutative[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.absorption[0m [90m0.007s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.distributive[0m [90m0.011s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.lattice:lowerBoundedDistributiveLattice.serializable[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.x\\y ∧ y = 0[0m [90m0.006s[0m
[32m  + [0m[32mSet[Byte]: generalized bool.x\\y ∨ y = x ∨ y[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.02s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.106s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.089s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.003s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.associativity[0m [90m0.004s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.combineAllOption[0m [90m0.038s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.serializable[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.pow(a, 2) == a * a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.multiplicative:multiplicative semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.distributive[0m [90m0.012s[0m
[32m  + [0m[32mSet[Byte]: boolean rng.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.associativity[0m [90m0.011s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAll[0m [90m0.165s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAllOption[0m [90m0.15s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.commutative[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.associativity[0m [90m0.004s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineAllOption[0m [90m0.035s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.commutative[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.absorption[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.distributive[0m [90m0.008s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.lattice:lowerBoundedDistributiveLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.x\\y ∧ y = 0[0m [90m0.003s[0m
[32m  + [0m[32mSet[Byte]-bool-from-rng: generalized bool.x\\y ∨ y = x ∨ y[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.006s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.072s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.084s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.003s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.associativity[0m [90m0.005s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.combineAllOption[0m [90m0.034s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.base:semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.pow(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.multiplicative:multiplicative semigroup.serializable[0m [90m0.001s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.distributive[0m [90m0.012s[0m
[32m  + [0m[32mSet[Byte]-rng-from-bool: boolean rng.idempotence[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: partialOrder.antisymmetry[0m [90m0.007s[0m
[32m  + [0m[32mSet[Int]: partialOrder.antisymmetry-eq[0m [90m0.021s[0m
[32m  + [0m[32mSet[Int]: partialOrder.gt[0m [90m0.005s[0m
[32m  + [0m[32mSet[Int]: partialOrder.gteqv[0m [90m0.004s[0m
[32m  + [0m[32mSet[Int]: partialOrder.lt[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: partialOrder.partialCompare[0m [90m0.005s[0m
[32m  + [0m[32mSet[Int]: partialOrder.pmax[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: partialOrder.pmin[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: partialOrder.reflexitivity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: partialOrder.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mSet[Int]: partialOrder.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Int]: partialOrder.symmetry-eq[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: partialOrder.transitivity[0m [90m0.004s[0m
[32m  + [0m[32mSet[Int]: partialOrder.transitivity-eq[0m [90m0.004s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.006s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.054s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.056s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mSet[Int]: semiring.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.001s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.associativity[0m [90m0.007s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineAllOption[0m [90m0.058s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 1) == a[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 2) == a |+| a[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.pow(a, 1) == a[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.pow(a, 2) == a * a[0m [90m0.003s[0m
[32m  + [0m[32mSet[Int]: semiring.multiplicative:multiplicative semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[Int]: semiring.distributive[0m [90m0.009s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.044s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.51s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.01s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.43s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.01s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.023s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.012s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.012s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.016s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.base:semigroup.associativity[0m [90m0.032s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineAllOption[0m [90m0.38s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 1) == a[0m [90m0.009s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 2) == a |+| a[0m [90m0.018s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.base:semigroup.serializable[0m [90m0.001s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.pow(a, 1) == a[0m [90m0.011s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.pow(a, 2) == a * a[0m [90m0.012s[0m
[32m  + [0m[32mSet[String]: semiring.multiplicative:multiplicative semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mSet[String]: semiring.distributive[0m [90m0.032s[0m
[32m  + [0m[32mMap[Char, Int]: eq.antisymmetry-eq[0m [90m0.069s[0m
[32m  + [0m[32mMap[Char, Int]: eq.reflexitivity-eq[0m [90m0.005s[0m
[32m  + [0m[32mMap[Char, Int]: eq.serializable[0m [90m0.001s[0m
[32m  + [0m[32mMap[Char, Int]: eq.symmetry-eq[0m [90m0.006s[0m
[32m  + [0m[32mMap[Char, Int]: eq.transitivity-eq[0m [90m0.008s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.032s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.162s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.003s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.103s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.002s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.003s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.009s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.007s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.003s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.003s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.003s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.002s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.005s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.008s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.associativity[0m [90m0.009s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineAllOption[0m [90m0.069s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 2) == a |+| a[0m [90m0.007s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.base:semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.pow(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.pow(a, 2) == a * a[0m [90m0.007s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.multiplicative:multiplicative semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Char, Int]: semiring.distributive[0m [90m0.017s[0m
[32m  + [0m[32mMap[Int, BigInt]: eq.antisymmetry-eq[0m [90m0.077s[0m
[32m  + [0m[32mMap[Int, BigInt]: eq.reflexitivity-eq[0m [90m0.006s[0m
[32m  + [0m[32mMap[Int, BigInt]: eq.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Int, BigInt]: eq.symmetry-eq[0m [90m0.012s[0m
[32m  + [0m[32mMap[Int, BigInt]: eq.transitivity-eq[0m [90m0.013s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.025s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.173s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.142s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.007s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.003s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.005s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.base:semigroup.associativity[0m [90m0.015s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineAllOption[0m [90m0.112s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 1) == a[0m [90m0.004s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.base:semigroup.combineN(a, 2) == a |+| a[0m [90m0.006s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.base:semigroup.serializable[0m [90m0.001s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.pow(a, 1) == a[0m [90m0.003s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.pow(a, 2) == a * a[0m [90m0.01s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.multiplicative:multiplicative semigroup.serializable[0m [90m0.0s[0m
[32m  + [0m[32mMap[Int, BigInt]: semiring.distributive[0m [90m0.013s[0m
[32m  + [0m[32mByte: order.antisymmetry[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.antisymmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.compare[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.gt[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.gteqv[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.lt[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.max[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.min[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.partialCompare[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.pmax[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.pmin[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.reflexitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.symmetry-eq[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.totality[0m [90m0.001s[0m
[32m  + [0m[32mByte: order.transitivity[0m [90m0.0s[0m
[32m  + [0m[32mByte: order.transitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.003s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mByte: commutative ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.distributive[0m [90m0.0s[0m
[32m  + [0m[32mByte: commutative ring.fromBigInt[0m [90m0.005s[0m
[32m  + [0m[32mByte: commutative ring.fromInt[0m [90m0.001s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.join:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.commutative[0m [90m0.001s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.meet:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mByte: lattice.absorption[0m [90m0.001s[0m
[32m  + [0m[32mByte: lattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.antisymmetry[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.antisymmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.compare[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.gt[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.gteqv[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.lt[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.max[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.min[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.partialCompare[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.pmax[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.pmin[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.reflexitivity[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.reflexitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.symmetry-eq[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.totality[0m [90m0.001s[0m
[32m  + [0m[32mShort: order.transitivity[0m [90m0.0s[0m
[32m  + [0m[32mShort: order.transitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.004s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: commutative ring.distributive[0m [90m0.001s[0m
[32m  + [0m[32mShort: commutative ring.fromBigInt[0m [90m0.003s[0m
[32m  + [0m[32mShort: commutative ring.fromInt[0m [90m0.001s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.join:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.meet:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mShort: lattice.absorption[0m [90m0.001s[0m
[32m  + [0m[32mShort: lattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.antisymmetry[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.antisymmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mChar: order.compare[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.gt[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.gteqv[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.lt[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.max[0m [90m0.001s[0m
[32m  + [0m[32mChar: order.min[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.partialCompare[0m [90m0.001s[0m
[32m  + [0m[32mChar: order.pmax[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.pmin[0m [90m0.001s[0m
[32m  + [0m[32mChar: order.reflexitivity[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.reflexitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.serializable[0m [90m0.001s[0m
[32m  + [0m[32mChar: order.symmetry-eq[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.totality[0m [90m0.0s[0m
[32m  + [0m[32mChar: order.transitivity[0m [90m0.001s[0m
[32m  + [0m[32mChar: order.transitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.antisymmetry[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.antisymmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.compare[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.gt[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.gteqv[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.lt[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.max[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.min[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.partialCompare[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.pmax[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.pmin[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.reflexitivity[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.symmetry-eq[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.totality[0m [90m0.0s[0m
[32m  + [0m[32mInt: order.transitivity[0m [90m0.001s[0m
[32m  + [0m[32mInt: order.transitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.003s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutative ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.distributive[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutative ring.fromBigInt[0m [90m0.002s[0m
[32m  + [0m[32mInt: commutative ring.fromInt[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.003s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.003s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.absorption[0m [90m0.0s[0m
[32m  + [0m[32mInt: boundedLattice.distributive[0m [90m0.001s[0m
[32m  + [0m[32mInt: boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.associativity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.commutative[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.additive:additive commutative monoid.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mInt: commutativeRig.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mInt: commutativeRig.distributive[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.antisymmetry[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.antisymmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.compare[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.gt[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.gteqv[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.lt[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.max[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.min[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.partialCompare[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.pmax[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.pmin[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.reflexitivity[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.reflexitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.symmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mLong: order.totality[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.transitivity[0m [90m0.0s[0m
[32m  + [0m[32mLong: order.transitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.003s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: commutative ring.distributive[0m [90m0.001s[0m
[32m  + [0m[32mLong: commutative ring.fromBigInt[0m [90m0.002s[0m
[32m  + [0m[32mLong: commutative ring.fromInt[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.associativity[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.combineAllOption[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.combineAll[0m [90m0.002s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.combineAllOption[0m [90m0.002s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.meet:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.absorption[0m [90m0.0s[0m
[32m  + [0m[32mLong: boundedLattice.distributive[0m [90m0.001s[0m
[32m  + [0m[32mLong: boundedLattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.003s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.006s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.006s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.005s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigInt: commutative ring.distributive[0m [90m0.001s[0m
[32m  + [0m[32mBigInt: commutative ring.fromBigInt[0m [90m0.003s[0m
[32m  + [0m[32mBigInt: commutative ring.fromInt[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.associativity[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.017s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.014s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.01s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.008s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.consistent remove[0m [90m0.007s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.left inverse[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.right inverse[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.consistent division[0m [90m0.005s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Float]: field.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Float]: field.distributive[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Float]: field.fromBigInt[0m [90m0.006s[0m
[32m  + [0m[32mFPApprox[Float]: field.fromDouble[0m [90m0.007s[0m
[32m  + [0m[32mFPApprox[Float]: field.fromInt[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.associativity[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.017s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.005s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.base:commutative group.serializable[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.011s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.consistent remove[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.right inverse[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.consistent division[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[Double]: field.distributive[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[Double]: field.fromBigInt[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[Double]: field.fromDouble[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[Double]: field.fromInt[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.002s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.007s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.006s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.combineAll[0m [90m0.005s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.combineAllOption[0m [90m0.007s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.base:monoid.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mBigDecimal: ring.multiplicative:multiplicative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBigDecimal: ring.distributive[0m [90m0.002s[0m
[32m  + [0m[32mBigDecimal: ring.fromBigInt[0m [90m0.006s[0m
[32m  + [0m[32mBigDecimal: ring.fromInt[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.associativity[0m [90m0.023s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.075s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.044s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.commutative[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.005s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.003s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.consistent subtract[0m [90m0.005s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.sum(Nil) == zero[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.011s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.061s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.047s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.consistent remove[0m [90m0.008s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.left inverse[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.right inverse[0m [90m0.004s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.consistent division[0m [90m0.008s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.distributive[0m [90m0.006s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.fromBigInt[0m [90m0.018s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.fromDouble[0m [90m0.01s[0m
[32m  + [0m[32mFPApprox[BigDecimal]: field.fromInt[0m [90m0.002s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.associativity[0m [90m0.04s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAll[0m [90m0.069s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAll(Nil) == id[0m [90m0.002s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineAllOption[0m [90m0.055s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.003s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.commutative[0m [90m0.004s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.idempotence[0m [90m0.003s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.isEmpty[0m [90m0.003s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.leftIdentity[0m [90m0.003s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.join:boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.associativity[0m [90m0.005s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineAllOption[0m [90m0.042s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.commutative[0m [90m0.002s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.meet:semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.absorption[0m [90m0.004s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.distributive[0m [90m0.005s[0m
[32m  + [0m[32mBitSet: generalized bool.lattice:lowerBoundedDistributiveLattice.serializable[0m [90m0.001s[0m
[32m  + [0m[32mBitSet: generalized bool.x\\y ∧ y = 0[0m [90m0.005s[0m
[32m  + [0m[32mBitSet: generalized bool.x\\y ∨ y = x ∨ y[0m [90m0.005s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.002s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.004s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.consistent subtract[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.combineAll[0m [90m0.005s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.combineAllOption[0m [90m0.004s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.base:monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.pow(a, 2) == a * a[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.multiplicative:multiplicative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int): ring.distributive[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int): ring.fromBigInt[0m [90m0.008s[0m
[32m  + [0m[32m(Int, Int): ring.fromInt[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int) Band: band.associativity[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int) Band: band.combineAllOption[0m [90m0.003s[0m
[32m  + [0m[32m(Int, Int) Band: band.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32m(Int, Int) Band: band.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int) Band: band.idempotence[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int) Band: band.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32m(Int, Int) Band: band.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.antisymmetry[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.antisymmetry-eq[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.compare[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.gt[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.gteqv[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.lt[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.max[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.min[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.partialCompare[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.pmax[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.pmin[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.reflexitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.symmetry-eq[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.totality[0m [90m0.001s[0m
[32m  + [0m[32mUnit: order.transitivity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: order.transitivity-eq[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.associativity[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.commutative[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.consistent subtract[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.sum(Nil) == zero[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mUnit: commutative ring.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.distributive[0m [90m0.0s[0m
[32m  + [0m[32mUnit: commutative ring.fromBigInt[0m [90m0.005s[0m
[32m  + [0m[32mUnit: commutative ring.fromInt[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.associativity[0m [90m0.001s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.combineAll[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.combineAll(Nil) == id[0m [90m0.001s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.combineAllOption[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.base:monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.pow(a, 0) == one[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.pow(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.pow(a, 2) == a * a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: multiplicative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mUnit: multiplicative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.associativity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.combineAll[0m [90m0.001s[0m
[32m  + [0m[32mUnit: boundedSemilattice.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.combineAllOption[0m [90m0.001s[0m
[32m  + [0m[32mUnit: boundedSemilattice.combineN(a, 0) == id[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.combineN(a, 1) == a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.commutative[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.idempotence[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.isEmpty[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.leftIdentity[0m [90m0.0s[0m
[32m  + [0m[32mUnit: boundedSemilattice.rightIdentity[0m [90m0.001s[0m
[32m  + [0m[32mUnit: boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mOrder[N]: monoid.associativity[0m [90m0.032s[0m
[32m  + [0m[32mOrder[N]: monoid.combineAll[0m [90m0.084s[0m
[32m  + [0m[32mOrder[N]: monoid.combineAll(Nil) == id[0m [90m0.007s[0m
[32m  + [0m[32mOrder[N]: monoid.combineAllOption[0m [90m0.042s[0m
[32m  + [0m[32mOrder[N]: monoid.combineN(a, 0) == id[0m [90m0.004s[0m
[32m  + [0m[32mOrder[N]: monoid.combineN(a, 1) == a[0m [90m0.005s[0m
[32m  + [0m[32mOrder[N]: monoid.combineN(a, 2) == a |+| a[0m [90m0.004s[0m
[32m  + [0m[32mOrder[N]: monoid.isEmpty[0m [90m0.006s[0m
[32m  + [0m[32mOrder[N]: monoid.leftIdentity[0m [90m0.003s[0m
[32m  + [0m[32mOrder[N]: monoid.rightIdentity[0m [90m0.003s[0m
[32m  + [0m[32mOrder[N]: monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.associativity[0m [90m0.021s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.combineAll[0m [90m0.022s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.combineAll(Nil) == id[0m [90m0.004s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.combineAllOption[0m [90m0.018s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.combineN(a, 0) == id[0m [90m0.003s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.commutative[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.isEmpty[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: boundedSemilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mEq[N]: semilattice.associativity[0m [90m0.006s[0m
[32m  + [0m[32mEq[N]: semilattice.combineAllOption[0m [90m0.04s[0m
[32m  + [0m[32mEq[N]: semilattice.combineN(a, 1) == a[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: semilattice.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: semilattice.commutative[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: semilattice.idempotence[0m [90m0.002s[0m
[32m  + [0m[32mEq[N]: semilattice.isIdempotent[0m [90m0.0s[0m
[32m  + [0m[32mEq[N]: semilattice.serializable[0m [90m0.0s[0m
[32m  + [0m[32mArray[Int]: order.antisymmetry[0m [90m0.005s[0m
[32m  + [0m[32mArray[Int]: order.antisymmetry-eq[0m [90m0.007s[0m
[32m  + [0m[32mArray[Int]: order.compare[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: order.gt[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: order.gteqv[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: order.lt[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: order.max[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: order.min[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: order.partialCompare[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: order.pmax[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: order.pmin[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: order.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mArray[Int]: order.reflexitivity-eq[0m [90m0.001s[0m
[32m  + [0m[32mArray[Int]: order.serializable[0m [90m0.0s[0m
[32m  + [0m[32mArray[Int]: order.symmetry-eq[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: order.totality[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: order.transitivity[0m [90m0.004s[0m
[32m  + [0m[32mArray[Int]: order.transitivity-eq[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: partialOrder.antisymmetry[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: partialOrder.antisymmetry-eq[0m [90m0.005s[0m
[32m  + [0m[32mArray[Int]: partialOrder.gt[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: partialOrder.gteqv[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: partialOrder.lt[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: partialOrder.partialCompare[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: partialOrder.pmax[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: partialOrder.pmin[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: partialOrder.reflexitivity[0m [90m0.001s[0m
[32m  + [0m[32mArray[Int]: partialOrder.reflexitivity-eq[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: partialOrder.serializable[0m [90m0.0s[0m
[32m  + [0m[32mArray[Int]: partialOrder.symmetry-eq[0m [90m0.002s[0m
[32m  + [0m[32mArray[Int]: partialOrder.transitivity[0m [90m0.003s[0m
[32m  + [0m[32mArray[Int]: partialOrder.transitivity-eq[0m [90m0.003s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.associativity[0m [90m0.033s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.combineAll[0m [90m0.902s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.combineAllOption[0m [90m0.955s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.commutative[0m [90m0.003s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.consistent remove[0m [90m0.005s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.leftIdentity[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.right inverse[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.rightIdentity[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.base:commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.consistent subtract[0m [90m0.004s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.serializable[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.sum(Nil) == zero[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.sumN(a, 0) == zero[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.sumN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.additive:additive commutative group.sumN(a, 2) == a + a[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.associativity[0m [90m0.004s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll[0m [90m0.197s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAll(Nil) == id[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineAllOption[0m [90m0.17s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 0) == id[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.combineN(a, 2) == a |+| a[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.commutative[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.isEmpty[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.leftIdentity[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.rightIdentity[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.base:commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.consistent remove[0m [90m0.004s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.left inverse[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.non-zero base:commutative group.right inverse[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.consistent division[0m [90m0.003s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.pow(a, 0) == one[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.pow(a, 1) == a[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.pow(a, 2) == a * a[0m [90m0.002s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.product(Nil) == one[0m [90m0.001s[0m
[32m  + [0m[32mRat: field.multiplicative:multiplicative commutative monoid.serializable[0m [90m0.0s[0m
[32m  + [0m[32mRat: field.distributive[0m [90m0.007s[0m
[32m  + [0m[32mRat: field.fromBigInt[0m [90m0.004s[0m
[32m  + [0m[32mRat: field.fromDouble[0m [90m0.005s[0m
[32m  + [0m[32mRat: field.fromInt[0m [90m0.002s[0m
[32m  + [0m[32mField.fromDouble with subnormal[0m [90m0.003s[0m
[info] Passed: Total 1692, Failed 0, Errors 0, Passed 1692
[info] Wrote /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/jvm/target/scala-3.0.0-RC1/algebra-laws_3.0.0-RC1-2.2.1-communityBuild.pom
[info] :: delivering :: org.typelevel#algebra-laws_3.0.0-RC1;2.2.1-communityBuild :: 2.2.1-communityBuild :: release :: Thu Feb 25 20:05:38 CET 2021
[info] 	delivering ivy file to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/laws/jvm/target/scala-3.0.0-RC1/ivy-2.2.1-communityBuild.xml
[info] 	published algebra-laws_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra-laws_3.0.0-RC1/2.2.1-communityBuild/poms/algebra-laws_3.0.0-RC1.pom
[info] 	published algebra-laws_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra-laws_3.0.0-RC1/2.2.1-communityBuild/jars/algebra-laws_3.0.0-RC1.jar
[info] 	published algebra-laws_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra-laws_3.0.0-RC1/2.2.1-communityBuild/srcs/algebra-laws_3.0.0-RC1-sources.jar
[info] 	published algebra-laws_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra-laws_3.0.0-RC1/2.2.1-communityBuild/docs/algebra-laws_3.0.0-RC1-javadoc.jar
[info] 	published ivy to /home/krzysiek/.ivy2/local/org.typelevel/algebra-laws_3.0.0-RC1/2.2.1-communityBuild/ivys/ivy.xml
Starting build for ProjectRef(file:/home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/,coreJVM)...
[info] compiling 2 Scala sources to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/.jvm/target/scala-3.0.0-RC1/test-classes ...
[warn] bad option '-Xlint' was ignored
[warn] bad option '-Ywarn-dead-code' was ignored
[warn] bad option '-Ywarn-numeric-widen' was ignored
[warn] three warnings found
[warn] three warnings found
[info] done compiling
[32malgebra.ring.RingTest:[0m
[32m  + [0m[32mRing.defaultFromBigInt[0m [90m0.125s[0m
[info] Passed: Total 1, Failed 0, Errors 0, Passed 1
[info] Wrote /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/.jvm/target/scala-3.0.0-RC1/algebra_3.0.0-RC1-2.2.1-communityBuild.pom
[info] :: delivering :: org.typelevel#algebra_3.0.0-RC1;2.2.1-communityBuild :: 2.2.1-communityBuild :: release :: Thu Feb 25 20:05:39 CET 2021
[info] 	delivering ivy file to /home/krzysiek/workspace/community-build3/ws/algebra_2.2.1/repo/core/.jvm/target/scala-3.0.0-RC1/ivy-2.2.1-communityBuild.xml
[info] 	published algebra_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra_3.0.0-RC1/2.2.1-communityBuild/poms/algebra_3.0.0-RC1.pom
[info] 	published algebra_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra_3.0.0-RC1/2.2.1-communityBuild/jars/algebra_3.0.0-RC1.jar
[info] 	published algebra_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra_3.0.0-RC1/2.2.1-communityBuild/srcs/algebra_3.0.0-RC1-sources.jar
[info] 	published algebra_3.0.0-RC1 to /home/krzysiek/.ivy2/local/org.typelevel/algebra_3.0.0-RC1/2.2.1-communityBuild/docs/algebra_3.0.0-RC1-javadoc.jar
[info] 	published ivy to /home/krzysiek/.ivy2/local/org.typelevel/algebra_3.0.0-RC1/2.2.1-communityBuild/ivys/ivy.xml
[success] Total time: 31 s, completed Feb 25, 2021 8:05:39 PM
